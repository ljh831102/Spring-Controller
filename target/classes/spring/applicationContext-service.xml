<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">
		<context:annotation-config />
		<context:component-scan base-package="cn.ljh.controller.service.impl,cn.ljh.controller.aspect" />
		<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
		
		<!-- 校验器 -->
		<bean id="validator"
			class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
			<!-- 校验器-->
			<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
			<!-- 指定校验使用的资源文件，如果不指定则默认使用classpath下的ValidationMessages.properties -->
			<property name="validationMessageSource" ref="messageSource" />
			<!-- 不设置则默认为false，true和false的区别在于：如果为true则不管验证项有多少个为失败的，
	            	 都只返回解析到的第一个，其余再返回，如果为false则返回所有验证失败项 -->
	        <property name="validationPropertyMap">
	            <map>
	                <entry key="hibernate.validator.fail_fast" value="false"/>
	            </map>
	        </property>
		</bean>
		
		<!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） --> 
		<bean id="messageSource"
			class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
			<!-- 资源文件名-->
			<property name="basenames">   
	       	 <list>    
	       	 	<!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找  -->
	            <value>classpath:message/CustomValidationMessages</value> 
	            <value>classpath:org/hibernate/validator/ValidationMessages</value>  
	       	 </list>   
	    	</property>
	    	<property name="useCodeAsDefaultMessage" value="false"/> 
			<!-- 默认编码格式 -->
			<property name="defaultEncoding" value="utf-8" />
			<!-- 对资源文件内容缓存时间，单位秒 -->
			<property name="cacheSeconds" value="120" />
		</bean>
		
		
		<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">          
		    <!-- 核心线程数，默认为1 -->          
		    <property name="corePoolSize" value="10" />          
		    <!-- 最大线程数，默认为Integer.MAX_VALUE -->          
		    <property name="maxPoolSize" value="50" />          
		    <!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE -->          
		    <property name="queueCapacity" value="1000" />          
		    <!-- 线程池维护线程所允许的空闲时间，默认为60s -->          
		    <property name="keepAliveSeconds" value="300" />          
		    <!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->          
		    <property name="rejectedExecutionHandler">          
		        <!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->          
		        <!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->          
		        <!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->          
		        <!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->          
		        <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />          
		    </property>          
		</bean>  
</beans>